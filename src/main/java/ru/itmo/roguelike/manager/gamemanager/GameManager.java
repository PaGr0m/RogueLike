package ru.itmo.roguelike.manager.gamemanager;

import ru.itmo.roguelike.characters.Player;
import ru.itmo.roguelike.field.AutoGeneratedField;
import ru.itmo.roguelike.field.Field;
import ru.itmo.roguelike.field.FiniteField;
import ru.itmo.roguelike.field.MobPositionGenerator;
import ru.itmo.roguelike.input.Event;
import ru.itmo.roguelike.input.InputHandler;
import ru.itmo.roguelike.ioc.ManagersModule;
import ru.itmo.roguelike.ioc.RenderModule;
import ru.itmo.roguelike.manager.actormanager.ActorManager;
import ru.itmo.roguelike.manager.actormanager.ProjectileManager;
import ru.itmo.roguelike.manager.collidemanager.CollideManager;
import ru.itmo.roguelike.render.Camera;
import ru.itmo.roguelike.render.RenderEngine;
import ru.itmo.roguelike.render.drawable.Drawable;
import ru.itmo.roguelike.render.particles.MovingUpText;
import ru.itmo.roguelike.render.particles.TextWithPoint;
import ru.itmo.roguelike.settings.GameSettings;
import ru.itmo.roguelike.utils.IntCoordinate;

import javax.inject.Inject;
import java.awt.*;
import java.io.*;
import java.nio.file.Paths;
import java.util.Random;

public class GameManager {
    private static final Random random = new Random();
    public static long GLOBAL_TIME = 0;
    private final InputHandler inputHandler;
    private final RenderEngine renderEngine;
    private final ActorManager actorManager;
    private final Camera camera;
    private final ProjectileManager projectileManager;
    private final Player player;

    private GameState gameState;
    private Field field;

    private final SaveLoadStatus saveLoadStatus = new SaveLoadStatus();

    @Inject
    public GameManager(
            Player player,
            @ManagersModule.MobManager ActorManager mobManager,
            InputHandler inputHandler,
            @RenderModule.Jexer RenderEngine renderEngine,
            Camera camera,
            ProjectileManager projectileManager
    ) {
        this.player = player;
        this.actorManager = mobManager;
        this.inputHandler = inputHandler;
        this.renderEngine = renderEngine;
        this.camera = camera;
        this.projectileManager = projectileManager;
    }

    public void reset() {
        field.reInit(player.getPosition());
        while (field.getTileType(player.getPosition()).isSolid()) {
            player.getPosition().setX(random.nextInt(1_000_000) - 500_000);
            player.getPosition().setY(random.nextInt(1_000_000) - 500_000);
            field.reInit(player.getPosition());
        }

        camera.moveForce(player.getPosition().getX(), player.getPosition().getY());
    }

    public void start() {
        gameState = GameState.RUNNING;

        MobPositionGenerator mobGenerator = new MobPositionGenerator(player);
        if (GameSettings.FILENAME == null) {
            field = new AutoGeneratedField(800, 600, 1, 1, mobGenerator); // FIXme: set real w/h
        } else {
            field = new FiniteField(Paths.get(GameSettings.FILENAME), player);
        }

        field.setDefaultPosToPlayer(player);

        mobGenerator.setPlayer(player);

        player.getPosition().setX(400);
        player.getPosition().setY(400);

        CollideManager.register(player);

        setUpControls();
        actorManager.killAll();
        projectileManager.killAll();
    }

    private void setUpControls() {
        inputHandler.registerEventListener(Event.MOVE_UP, () -> player.move(new IntCoordinate(0, -GameSettings.STEP)));
        inputHandler.registerEventListener(Event.MOVE_DOWN, () -> player.move(new IntCoordinate(0, GameSettings.STEP)));
        inputHandler.registerEventListener(Event.MOVE_LEFT, () -> player.move(new IntCoordinate(-GameSettings.STEP, 0)));
        inputHandler.registerEventListener(Event.MOVE_RIGHT, () -> player.move(new IntCoordinate(GameSettings.STEP, 0)));

        inputHandler.registerEventListener(Event.FIRE_UP, () -> player.attack(new IntCoordinate(0, -1)));
        inputHandler.registerEventListener(Event.FIRE_LEFT, () -> player.attack(new IntCoordinate(-1, 0)));
        inputHandler.registerEventListener(Event.FIRE_RIGHT, () -> player.attack(new IntCoordinate(1, 0)));
        inputHandler.registerEventListener(Event.FIRE_DOWN, () -> player.attack(new IntCoordinate(0, 1)));

        inputHandler.registerEventListener(Event.RESTART, player::die);

        inputHandler.registerEventListener(Event.USE_1, () -> player.useFromInventory(1));
        inputHandler.registerEventListener(Event.USE_2, () -> player.useFromInventory(2));
        inputHandler.registerEventListener(Event.USE_3, () -> player.useFromInventory(3));
        inputHandler.registerEventListener(Event.USE_4, () -> player.useFromInventory(4));
        inputHandler.registerEventListener(Event.USE_5, () -> player.useFromInventory(5));
        inputHandler.registerEventListener(Event.USE_6, () -> player.useFromInventory(6));
        inputHandler.registerEventListener(Event.USE_7, () -> player.useFromInventory(7));
        inputHandler.registerEventListener(Event.USE_8, () -> player.useFromInventory(8));

        inputHandler.registerEventListener(Event.SAVE, saveLoadStatus::save);
        inputHandler.registerEventListener(Event.LOAD, saveLoadStatus::load);
    }

    public boolean isGameRunning() {
        return gameState == GameState.RUNNING;
    }

    public void step() {
        GLOBAL_TIME++;
        inputHandler.handleInputs();
        CollideManager.collideAll();
        renderEngine.render();
        projectileManager.actAll(field);
        actorManager.actAll(field);
        player.act(field);
        renderEngine.render();
        IntCoordinate tmp = new IntCoordinate(-400, -300);
        tmp.add(player.getPosition());
        camera.update(tmp);
        field.process(camera.getCenter());

        saveLoadStatus.process();
    }

    public void saveGame() {
        String filename = GameSettings.getSaveFileName();
        try (DataOutputStream output = new DataOutputStream(new FileOutputStream(filename))) {
            player.saveToFile(output);
            player.getInventory().saveToFile(output);

            new TextWithPoint(player.getPosition(), "SAVED HERE", Color.RED);

        } catch (IOException e) {
            e.printStackTrace();
            System.exit(1);
        }
    }

    public void loadGame() {
        String filename = GameSettings.getSaveFileName();
        try (DataInputStream input = new DataInputStream(new FileInputStream(filename))) {

            player.loadFromFile(input);
            Drawable.unregisterAllForeground();
            CollideManager.unregisterAll();
            CollideManager.register(player);
            Drawable.register(player);
            field.reInit(player.getPosition());
            actorManager.killAll();
            projectileManager.killAll();
            camera.moveForce(player.getPosition().getX(), player.getPosition().getY());
            player.getInventory().reLoadFromFile(input, player);

            System.out.println("HERE");

            new MovingUpText(player.getPosition(), "LOADED SAVE " + filename, Color.RED);
        } catch (IOException e) {
            e.printStackTrace();
            new MovingUpText(player.getPosition(), "ERROR LOADING FILE :(", Color.RED);
        }
    }

    public Player getPlayer() {
        return player;
    }

    private class SaveLoadStatus {
        boolean save = false;
        boolean load = false;

        public void save() {
            save = true;
        }

        public void load() {
            load = true;
        }

        public void process() {
            if (save) {
                saveGame();
            } else if (load) {
                loadGame();
            }
            save = load = false;
        }
    }
}
